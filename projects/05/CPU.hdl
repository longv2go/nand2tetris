// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM == 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to restart the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // Address of next instruction

    PARTS:
    //// Replace this comment with your code.

    // instruction
    Mux16(a=instruction, b=preOutM, sel=instruction[15], out=aIn);

    // A Register
    Not(in=instruction[15], out=aInst);                     // if a-instruction or dest contain A
    Or(a=aInst, b=instruction[5], out=loadA);
    ARegister(in=aIn, load=loadA, out=outA, out[0..14]=addressM);  // >>>output addressM
    
    // D Register
    And(a=instruction[15], b=instruction[4], out=loadD);    // if c-instr and dest contain D
    DRegister(in=preOutM, load=loadD, out=outD);

    // input M
    Mux16(a=outA, b=inM, sel=instruction[12], out=aluinM);

    // ALU, >>>output outM
    ALU(x=outD, y=aluinM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=preOutM, zr=zr, ng=ng);

    // write M
    And(a=instruction[15], b=instruction[3], out=writeM);    // if c-instr and dest contain M, >>>output writeM

    // ====== pc ======
    DMux8Way(in=true, sel=instruction[0..2], a=a, b=b, c=c, d=d, e=e, f=f, g=g, h=h);

    Not(in=zr, out=notZR);
    Not(in=ng, out=notNG);

    // GT >
    And(a=notZR, b=notNG, out=bgt);
    And(a=b, b=bgt, out=gt);
    Or(a=false, b=gt, out=jmp0);

    // EQ =
    And(a=c, b=zr, out=eq);
    Or(a=jmp0, b=eq, out=jmp1);

    // GE >=
    Or(a=zr, b=notNG, out=bge);
    And(a=d, b=bge, out=ge);
    Or(a=jmp1, b=ge, out=jmp2);

    // LT < 0
    And(a=notZR, b=ng, out=blt);
    And(a=e, b=blt, out=lt);
    Or(a=jmp2, b=lt, out=jmp3);

    // NE !=
    And(a=f, b=notZR, out=ne);
    Or(a=jmp3, b=ne, out=jmp4);

    // LE <=
    Or(a=zr, b=ng, out=ble);
    And(a=g, b=ble, out=le);
    Or(a=jmp4, b=le, out=jmp5);

    // JMP
    Or(a=h, b=jmp5, out=jump);

    And(a=instruction[15], b=jump, out=loadPC);

    // if a-instr or no jump
    Not(in=loadPC, out=inc);

    PC(in=outA, load=loadPC, inc=inc, reset=reset, out[0..14]=pc);             // output PC
}